<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Centos7中安装和配置Mysql5.7]]></title>
    <url>%2F2019%2F06%2F16%2FCentos7%E4%B8%AD%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEMysql5.7%2F</url>
    <content type="text"><![CDATA[1、得到下载地址进入mysql官网 https://dev.mysql.com/downloads/repo/yum/点击download，然后在“No thanks, just start my download.”处鼠标右键，复制链接地址，获取rpm包的下载地址： https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 2、下载和安装mysql源要先安装下wget 命令 1yum -y install wget 下载 mysql源安装包 1wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 安装mysql源 1yum -y localinstall mysql57-community-release-el7-11.noarch.rpm 3、在线安装Mysql1yum -y install mysql-community-server 由于这个步骤下载的东西比较多，时间有点长，需要耐心等待。 4、启动Mysql服务1[root@ebs-63878 ~]# systemctl start mysqld 5、设置开机启动12[root@ebs-63878 ~]# systemctl enable mysqld[root@ebs-63878 ~]# systemctl daemon-reload 6、修改root本地登录密码mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个临时的默认密码 1[root@ebs-63878 ~]# vi /var/log/mysqld.log 可以看到临时密码为 mUpyXojr6Q:E 接下来修改密码： 12[root@ebs-63878 ~]# mysql -u root -pEnter password: 输入临时密码 mUpyXojr6Q:E，然后进入mysql命令行，修改密码为 xxxxx (备注 mysql5.7默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位) 12mysql&gt; set password=password(&apos;xxxxx&apos;);Query OK, 0 rows affected, 1 warning (0.01 sec) 7、设置允许远程登录Mysql默认不允许远程登录，需要设置下允许远程登录 12mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;xxxxx&apos; WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.01 sec) 接着退出 12mysql&gt; exit;Bye 防火墙开放3306端口 1234[root@ebs-63878 ~]# firewall-cmd --zone=public --add-port=3306/tcp --permanentsuccess[root@ebs-63878 ~]# firewall-cmd --reloadsuccess 8、配置默认编码为utf8修改/etc/my.cnf配置文件 1[root@ebs-63878 ~]# vi /etc/my.cnf 在[mysqld]下添加编码配置 123[mysqld]character_set_server=utf8init_connect=&apos;SET NAMES utf8&apos; 编辑保存完 重启mysql服务； 1[root@ebs-63878 ~]# systemctl restart mysqld 查看下编码： 123456789101112131415161718192021222324252627mysql&gt; show variables like &apos;%character%&apos;;+--------------------------+----------------------------+| Variable_name | Value |+--------------------------+----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.00 sec) 到此，可以使用sqlyog远程连接mysql了，且安装及配置全部完成。]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UML类图详解]]></title>
    <url>%2F2019%2F06%2F15%2FUML%E7%B1%BB%E5%9B%BE%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[注明：本文画图工具为StarUML 一、概述1.1、类图介绍首先介绍下类图，定义一个Person类，如下： 123456789101112131415161718public class Person &#123; private String name; private int age =1; public String getName() &#123; return name; &#125; public int getAge() &#123; return age; &#125; public void setName(String name) &#123; this.name=name; &#125; public void setAge(int age) &#123; this.age=age; &#125;&#125; 定义了两个字段name和age，其中age有一个初始化值1，另外定义name和age的set、get方法。然后我们来看下这个类在UML类图中是如何表示的：可以看到我们画了一个矩形，然后从上到下分割成三格，第一格为类名，第二格为类中字段属性，这里属性的表达也是有一定格式的，如下： 权限 属性名：类型 [ = 默认值 ] 由于这里我们的name和age都是私有的，所以在前面加一个-，另外还有其他几种权限：public 、protected、default，它们分别对应+、#、~。由于我们这里的age有一个默认值1，所以在类型后面再加上‘=1’来表示。接下来来看下第三格，第三格为类的方法，其格式如下： 权限 方法名称(参数列表) [ : 返回类型] 中括号代表可选项。 1.2、类与类之间的关系在画类图时，首先要清晰类和类之间的关系。类与类的关系总共有以下几种：泛化（Generalization）、实现（Realization）、依赖（Dependence）、关联（Association）、聚合（Aggregation）、组合（Composition）。 这6种关系的强弱顺序为：泛化=实现&gt;组合&gt;聚合&gt;关联&gt;依赖； 二、类关系详解 2.1、泛化泛化表示is-a的关系，在Java中也叫作继承关系，在UML中用带空心三角形的直线来表示，箭头从子类指向父类，是对象之间耦合度最大的一种关系。增加两个类，一个Studen类，一个警察Policemen类，两个类均继承自Person类，那么他们的类关系图表示如下： 2.2、实现这里的实现关系就是Java中类与接口的实现关系，在UML中用带空心三角形的虚线表示。由于Student和Policeman都职业，学生的职业就是学习，而警察的职业为保护人民。所有这里我们定义一个接口，里面有一个职业的方法： public interface ICareer{ void career();} 这个接口用UML类图表示如下：可以看到在接口名字上多了一个&lt;&gt;字符来表示这个为接口。接下来我们让Student和Policeman都实现这个接口，UML类图如下： 2.3、依赖依赖是对象之间最弱的一种关联方式，是临时性的关联。代码中一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系。一个类调用被依赖类中的某些方法而得以完成这个类的一些职责。在类图使用带箭头的虚线表示，箭头从使用类指向被依赖的类。这里学生捡到钱交给警察叔叔，学生和警察叔叔就是一种依赖关系。因为学生捡到钱给警察是一种偶然的事情，交给警察后他们之间就没有关系了。我们在学生类中加入一个交钱的方法，在警察类中加入一个收钱的方法，当调用学生的交钱方法时，就调用警察的收钱方法。Student的代码如下： 12345678public class Student&#123;public Policemen policemen;public void sendCoin()&#123; policemen.receiveCoin();&#125;&#125; 可以看到Student类中引用了Policemen类，也就是说Student依赖了Policemen，这种依赖关系我们用带箭头的虚线表示，箭头指向被依赖对象，这里也就是Policemen，UML类图表示如下： 2.4、关联关联是一种比较强的关系，他们的关系是比较持久的，稳定的。比如学生从家里出来，学生和家就是一种关联关系。这种关系是比较稳定的。关联分单向关联和双向关联，如果一个类知道或者引用了另一个类，而另一个类不知道或者没有引用这个类，则这两个类是单向关联的。比如这里学生与家的关系就是单向关联的，因为每个学生都是有个家的（不考虑孤儿），但不能说每个家里都有学生。 单向关联我们用带箭头的实线表示，箭头指向被引用或者被包含的类，这里也就是家这个类。示例如下：双向关联是两个类彼此都知道对方的存在，比如老师与学生的关系就是双向的。小明的语文老师是张老师，张老师的学生有小明。双向关联用不带箭头的实线来连接两个类。示例如下： 2.5、聚合聚合关系表示has-a的关系，是一种不稳定的包含关系。强调的是整体和部分的关系，其中部分可以脱离整体而存在。比如雁群和一只大雁的关系，就是聚合关系，大雁离开雁群还是可以独立存在的。再比如警察与制服的关系，制服也是警察的一部分，制服可以脱离警察而存在。在UML类图中聚合用带空心菱形的直线表示，其中菱形从局部指向整体。 2.6、组合组合表示contains-a的关系，是一种强烈的包含关系。它与聚合关系很像，也是强调整体与部分的关系，不同的是部分无法脱离整体存在。比如学生用手捡钱，其中手就是学生的一部分，但是手不能脱离学生而单独存在。这里称学生与手为组合关系，用带实心的菱形直线表示，其中菱形指向整体：]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
</search>
